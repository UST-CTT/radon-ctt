# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class POSTProjects(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file=None, repository_url=None, servicetemplate_location=None):  # noqa: E501
        """POSTProjects - a model defined in OpenAPI

        :param file: The file of this POSTProjects.  # noqa: E501
        :type file: file
        :param repository_url: The repository_url of this POSTProjects.  # noqa: E501
        :type repository_url: str
        :param servicetemplate_location: The servicetemplate_location of this POSTProjects.  # noqa: E501
        :type servicetemplate_location: str
        """
        self.openapi_types = {
            'file': file,
            'repository_url': str,
            'servicetemplate_location': str
        }

        self.attribute_map = {
            'file': 'file',
            'repository_url': 'repository_url',
            'servicetemplate_location': 'servicetemplate_location'
        }

        self._file = file
        self._repository_url = repository_url
        self._servicetemplate_location = servicetemplate_location

    @classmethod
    def from_dict(cls, dikt) -> 'POSTProjects':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The POSTProjects of this POSTProjects.  # noqa: E501
        :rtype: POSTProjects
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file(self):
        """Gets the file of this POSTProjects.


        :return: The file of this POSTProjects.
        :rtype: file
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this POSTProjects.


        :param file: The file of this POSTProjects.
        :type file: file
        """

        self._file = file

    @property
    def repository_url(self):
        """Gets the repository_url of this POSTProjects.


        :return: The repository_url of this POSTProjects.
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this POSTProjects.


        :param repository_url: The repository_url of this POSTProjects.
        :type repository_url: str
        """

        self._repository_url = repository_url

    @property
    def servicetemplate_location(self):
        """Gets the servicetemplate_location of this POSTProjects.


        :return: The servicetemplate_location of this POSTProjects.
        :rtype: str
        """
        return self._servicetemplate_location

    @servicetemplate_location.setter
    def servicetemplate_location(self, servicetemplate_location):
        """Sets the servicetemplate_location of this POSTProjects.


        :param servicetemplate_location: The servicetemplate_location of this POSTProjects.
        :type servicetemplate_location: str
        """
        if servicetemplate_location is None:
            raise ValueError("Invalid value for `servicetemplate_location`, must not be `None`")  # noqa: E501

        self._servicetemplate_location = servicetemplate_location
